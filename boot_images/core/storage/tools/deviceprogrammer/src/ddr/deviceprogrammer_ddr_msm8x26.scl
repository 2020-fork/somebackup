/*
#====*====*====*====*====*====*====*====*====*====*====*====*====*====*====*
#
#                     SCATTER LOADING DESCRIPTION FILE
#
#  Copyright 2012 - 2013 by QUALCOMM Incorporated. All Rights Reserved.
#
#  GENERAL DESCRIPTION
#
#  The scatter loading description file is used to define the SBL1 memory map.
#*====*====*====*====*====*====*====*====*====*====*====*====*====*====*====*/
//===========================================================================
//
//                           EDIT HISTORY FOR FILE
//  This section contains comments describing changes made to the module.
//  Notice that changes are listed in reverse chronological order.
//
//  $Header: //components/rel/boot.bf/3.1.2.c2.2/boot_images/core/storage/tools/deviceprogrammer/src/ddr/deviceprogrammer_ddr_msm8x26.scl#1 $
//  $DateTime: 2016/12/12 23:35:46 $ 
//  $Author: pwbldsvc $
//
// when       who     what, where, why
// --------   ---     -------------------------------------------------------
// 08/08/13   aus     Increase SBL1 size to 260KB
// 08/07/13   sr      Removed SBL1_USB_ZI section 
// 07/11/13   aus     Increase the image size limit to 249KB
// 06/18/13   sl      Add SBL1_USB_ZI section
// 05/13/13   jz      Increase the image size limit to 240KB
// 03/26/13   dh      Add SBL1_IMAGE_SIZE define
// 11/28/12   dh      Add BOOT_UNCACHED_DDR_ZI_ZONE
// 11/30/12   dh      Assign ce zi to ddr
// 11/07/12   dh      Update to latest
// 09/26/12   jz      Ported changes from 8974
// 08/28/12   jz      Inital revision (based on 8974)

#include "boot_target.h"

//the size of entire image, must be smaller than 280KB
#define SBL1_IMAGE_SIZE   (280 * 1024)

CODE_ROM SCL_SBL1_CODE_BASE SCL_SBL1_TOTAL_SIZE
{ 
  // This section contains SBL1's code and ro data
  SBL1_ROM SCL_SBL1_CODE_BASE 
  {
    sbl1.o (SBL1_ENTRY, +FIRST)
    * (+RO-CODE)
    * (+RO-DATA, LAST)
  }

  // RW region must follow code region. The region from RW address
  // to end of SBL will be marked as non executable region in the MMU.
  // We must align it to 4k boundary to be able to mark it in L2 page table
  SBL1_DATA_RW +0x0 ALIGN 0x1000
  {
    * (+RW)
  }
  
  //Indirect vector table must be scatter loaded to overwrite PBL indirect vector table
  SBL1_INDIRECT_VEC_TBL  PBL_APPS_INDIRECT_VEC_BASE PBL_APPS_INDIRECT_VEC_SIZE
  {
    sbl1.o(SBL1_INDIRECT_VECTOR_TABLE,+FIRST)
  }
  
  // This section contains non DDR ZI. It's allocated right after SBL1_DATA_RW section
  SBL1_DATA_ZI ImageLimit(SBL1_DATA_RW)
  {
    //Explicitly add only hotplug module's ZI to non DDR ZI, all other file system code should
    //allocate ZI in DDR
    fs_hotplug*.o (+ZI)
    * (BOOT_INTERNAL_HEAP)
    * (+ZI)
  }
  
  // Placeholder to reserve space for the boot logger's meta info data.
  SBL1_LOG_META_INFO_SECTION +0x0 EMPTY SCL_BOOT_LOG_META_INFO_SIZE
  {
  }
  
  // Placeholder to reserve buffer space for the boot logger's log messages
  SBL1_LOG_BUF_SECTION +0x0 EMPTY SCL_SBL1_BOOT_LOG_BUF_SIZE
  {
  }
  
  //This section contains all ZI that can be allocated in DDR.
  SBL1_DDR_ZI SCL_SBL1_DDR_ZI_BASE SCL_SBL1_DDR_ZI_SIZE
  {
    
    //DDR ZI for file system. All ZI from file system code can be stored
    //in DDR except hotplug, which is added to SBL1_DATA_ZI section 
    fs_*.o (+ZI)
    hfat*.o(+ZI)
    Ce*.o (+ZI)
    
    //DDR ZI for DAL DDR Heap
    * (BOOT_EXTERNAL_HEAP)
    * (BOOT_DDR_ZI_DATA_ZONE)
  }    
  
  //This section contains L1 and L2 page table that's allocated in DDR.
  // SCL_SBL1_DDR_PAGE_TABLE_BASE must be 16k aligned
  SBL1_DDR_PAGE_TABLE SCL_SBL1_DDR_PAGE_TABLE_BASE SCL_SBL1_DDR_PAGE_TABLE_SIZE
  {
    *(BOOT_PAGE_TABLE_ZONE)
  }
  
  //This section contains all ZI for dload and qfprom test framework 
  //This section is uncached
  SBL1_DLOAD_ZI  SCL_DLOAD_BUFFERS_BASE  SCL_DLOAD_BUFFERS_SIZE
  {
    qhsusb_*.o (+ZI)
    *sahara*.o(+ZI)
    *dload*.o(+ZI)
    *(BOOT_UNCACHED_DDR_ZI_ZONE)
  }
  
  DEVICEPROGRAMMER_DDR DEVICEPROGRAMMER_DDR_BASE
  {
    * (CHANNEL_BUFFER_A_SECTION)
    * (CHANNEL_BUFFER_B_SECTION)
    * (TRANSMIT_BUFFER_SECTION)
    deviceprogrammer*.o (+ZI)
  }
  
  // Placeholder to reserve space for the boot logger's meta info data.
  SBL1_DDR_LOG_META_INFO_SECTION SCL_DDR_BOOT_LOG_META_INFO_BASE EMPTY SCL_BOOT_LOG_META_INFO_SIZE
  {
  }
  
  // Placeholder to reserve buffer space for the boot logger's log messages
  SBL1_DDR_LOG_BUF_SECTION SCL_SBL1_DDR_BOOT_LOG_BUF_BASE EMPTY SCL_SBL1_DDR_BOOT_LOG_BUF_SIZE
  {
  }  
  
  ScatterAssert((ImageLimit(SBL1_LOG_BUF_SECTION) - SCL_SBL1_CODE_BASE)
                 < SBL1_IMAGE_SIZE)
}
