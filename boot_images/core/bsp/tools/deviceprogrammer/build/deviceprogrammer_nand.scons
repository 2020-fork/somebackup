#===============================================================================
#
# DEVICEPROGRAMMER build script
#
# GENERAL DESCRIPTION
#    build script
#
# Copyright (c) 2009-2014 by Qualcomm Technologies, Incorporated.
# All Rights Reserved.
# QUALCOMM Proprietary/GTDR
#
#-------------------------------------------------------------------------------
#
#  $Header: //components/rel/boot.bf/3.1.2.c2.2/boot_images/core/bsp/tools/deviceprogrammer/build/deviceprogrammer_nand.scons#1 $
#  $DateTime: 2016/12/12 23:35:46 $
#  $Author: pwbldsvc $
#  $Change: 11981336 $
#                      EDIT HISTORY FOR FILE
#
#  This section contains comments describing changes made to the module.
#  Notice that changes are listed in reverse chronological order.
#
# when         who     what, where, why
# ----------   ---     ---------------------------------------------------------
# 2014-10-28   sb      Updated for 8952
# 2014-10-15   sb      Updated for 8909
# 2013-03-07   ab      Initial firehose checkin for deviceprogrammer on 8974
#
#===============================================================================

"""
build.cmd deviceprogrammer STORAGE=nand

"""

import os
Import('env storage_medium variant_name')
env = env.Clone()

image_name = variant_name + "_" + storage_medium + "_firehose_" + env['MSM_ID']
env['STORAGE_MEDIUM'] = storage_medium

#------------------------------------------------------------------------------
# Check if we need to load this script or just bail-out
#------------------------------------------------------------------------------
# alias - First alias is always the target then the other possible aliases

# IMPORTANT: We are setting the first alias as the full variant name, because
# currently our scons tools set the build path according to alias_list[0]
aliases = [
    image_name,
    'deviceprogrammer',
]

proc = 'krait'
if env['CHIPSET'] in ['msm8916', 'msm8936','msm8909', 'msm8952', 'msm8956']:
    proc = 'a53'
elif env['MSM_ID'] in ['9x45']:
    proc = 'sparrow'

env.InitImageVars(
   alias_list = aliases,               	         # list of aliases, unique name index [0]
   proc = proc,                      	            # proc settings
   config = 'apps',                             	# config settings
   build_tags = ['DEVICEPROGRAMMER_IMAGE','DEVICEPROGRAMMER_NAND_IMAGE', 'DAL_DEVCFG_TOOLS_IMG', 'FIREHOSE_IMAGE', 'KERNEL_BOOT_DRIVER'],    # list of build tags for sub lib scripts
   tools = [
   '${BUILD_ROOT}/core/bsp/build/scripts/mbn_builder.py',
   '${BUILD_ROOT}/core/bsp/build/scripts/bin_builder.py',
   '${BUILD_ROOT}/core/bsp/build/scripts/scl_builder.py',
   '${BUILD_ROOT}/core/bsp/build/scripts/devcfg_builder.py',
   '${BUILD_ROOT}/tools/build/scons/sectools/sectools_builder.py',
   'buildspec_builder.py'],
   target = image_name,
)

if not env.CheckAlias():
   Return()

#------------------------------------------------------------------------------
# Init default values for this PROC/Image
#------------------------------------------------------------------------------
env.Replace(BUILD_TOOL_CHAIN = 'yes')
env.Replace(USES_FLASH_REDUCED_BUILD = 'yes')
env.Replace(USES_DEVCFG = 'yes')


#===============================================================================
# DEVICEPROGRAMMER build rules
#===============================================================================

#------------------------------------------------------------------------------
# Configure and load in USES and path variables
#------------------------------------------------------------------------------
env.InitBuildConfig()

#---------------------------------------------------------------------------
# Load in the tools scripts
#---------------------------------------------------------------------------
env.LoadToolScript('arm', toolpath = ['${BUILD_SCRIPTS_ROOT}'])
env.LoadToolScript('modem_defs', toolpath = ['${BUILD_SCRIPTS_ROOT}'])   
env.LoadToolScript('hostdl_gen_hex', toolpath = ['${BUILD_ROOT}/core/bsp/tools/flash/build'])
env.LoadToolScript('scl_builder', toolpath = ['${BUILD_ROOT}/core/bsp/build/scripts'])
env.LoadToolScript('bin_builder', toolpath = ['${BUILD_ROOT}/core/bsp/build/scripts'])
env.LoadToolScript('mbn_builder', toolpath = ['${BUILD_ROOT}/core/bsp/build/scripts'])

#Replace MBN_ROOT
env.Replace(MBN_ROOT = "${BUILD_ROOT}/build/ms/bin/${MSM_ID}/nand")

#env.Replace(ARMLD_NOREMOVE_CMD = "--info unused")
# Define processor instruction set
if env['CHIPSET'] in ['msm8916', 'msm8936', 'msm8909', 'msm8952', 'msm8956']:
    env.Replace(ARM_CPU_A53 = "7-A.security")
    env.Replace(ARM_CPU = "${ARM_CPU_CMD} ${ARM_CPU_A53}")
else:
    env.Replace(ARM_CPU_KRAIT = "7-A.security")
    env.Replace(ARM_CPU = "${ARM_CPU_CMD} ${ARM_CPU_KRAIT}")
env.Replace(ARM_ALIGN = " ${ARM_NO_UNALIGNED_ACCESS} -UL41")

# Force debug and symbols for flash tools, required by T32 swbp interface
env.Replace(ARM_DBG = "-g --dwarf2")            # Enable DWARF2 format debug tables

# After loading default rules, make some optimization changes
env.Append(ARMCC_CODE = " ${ARM_SPLIT_SECTIONS}")
env.Replace(ARMLD_NOREMOVE_CMD = "")

# Compile thumb code
env.Replace(CC = env['TCC'])

#disable unaligned access for c/c++ compiler and assembler
env.Replace(ARMCC_CODE = "${ARM_END} ${ARM_NO_UNALIGNED_ACCESS}")
env.Append(ARMCXX_CODE = " ${ARM_NO_UNALIGNED_ACCESS}")
env.Append(ASFLAGS = " --keep ${ARM_NO_UNALIGNED_ACCESS}")

# Define processor instruction set
env.Replace(ARM_CPU_KRAIT = "7-A.security")
env.Replace(ARM_CPU = "${ARM_CPU_CMD} ${ARM_CPU_KRAIT}")


#------------------------------------------------------------------------------
# Add extension flags for DEVICEPROGRAMMER
#------------------------------------------------------------------------------
if env['BUILD_VER'] == "":
   env.Replace(BUILD_VER = '0')

if env['MSM_ID'] in ['8974', '8084', '8092']:
    CODE_START_ADDR           = "0xF800C050"
    CODE_HDR_ADDR             = "0xF800C000"
    STACK_BASE_ADDR          = "0xF8002000"
    RW_START_ADDR             = "+0x0"
    FIREHOSE_CHANNEL_BUFFER_SIZE = "131072"
    CHANNEL_BUFFER_A_START_ADDR = "0xFC100000"
    CHANNEL_BUFFER_B_START_ADDR = "0xFE806000"
    FIREHOSE_TX_BUFFER_SIZE    = "4096"
    TRANSMIT_BUFFER_START_ADDR = "0xFE826000"
    ZI_START_ADDR             = "+0x0"
    USB_ZI_START_ADDR         = "0xFE827000"
elif env['MSM_ID'] in ['8x26', '8x62', '8x10', '8x62']:
    CODE_START_ADDR           =   "0xF800C050"
    CODE_HDR_ADDR             =   "0xF800C000"
    STACK_BASE_ADDR          =    "0xF8002000"
    RW_START_ADDR             =   "+0x0"
    FIREHOSE_CHANNEL_BUFFER_SIZE = "49152"
    CHANNEL_BUFFER_A_START_ADDR = "0xFC100000"
    CHANNEL_BUFFER_B_START_ADDR = "0xFC10C000"
    FIREHOSE_TX_BUFFER_SIZE    =   "4096"
    TRANSMIT_BUFFER_START_ADDR =  "0xFC118000"
    ZI_START_ADDR             =   "+0x0"
    USB_ZI_START_ADDR         =   "0xFC119000"
elif env['CHIPSET'] in ['msm8916', 'msm8936', 'msm8956']:
    CODE_START_ADDR           =   "0x08005050"
    CODE_HDR_ADDR             =   "0x08005000"
    STACK_BASE_ADDR          =    "0x08035000"
    RW_START_ADDR             =   "+0x0"
    FIREHOSE_CHANNEL_BUFFER_SIZE = "16384"
    CHANNEL_BUFFER_A_START_ADDR = "0x00216000"
    CHANNEL_BUFFER_B_START_ADDR = "0x0021A000"
    FIREHOSE_TX_BUFFER_SIZE    =   "4096"
    TRANSMIT_BUFFER_START_ADDR =  "0x0021E000"
    ZI_START_ADDR             =   "+0x0"
    USB_ZI_START_ADDR         =   "0x0021F000"
elif env['CHIPSET'] in ['mdm9x45', 'msm8909', 'msm8952']:
    CODE_START_ADDR           =   "0x08005800"
    CODE_HDR_ADDR             =   "0x080057B0"
    #STACK_BASE_ADDR          =    "0x08035000"
    STACK_BASE_ADDR          =    "0x08034000"
    RW_START_ADDR             =   "+0x0"
    FIREHOSE_CHANNEL_BUFFER_SIZE = "8192"
    CHANNEL_BUFFER_A_START_ADDR = "0x00216000"
    CHANNEL_BUFFER_B_START_ADDR = "0x00218000"
    FIREHOSE_TX_BUFFER_SIZE    =   "2048"
    TRANSMIT_BUFFER_START_ADDR =  "0x0021A000"
    ZI_START_ADDR             =   "+0x0"
    USB_ZI_START_ADDR         =   "0x0021A800"
    NAND_PAGE_SIZE = "4096"
    FLASH_CFG_ID = "FLASH_9K_CORTEXA7_CFG"
    MSMID_TYPE = "M9x45"
    FLASH_DAL_CFG = "config_v2"
    FLASH_HAL_CFG = "config_v1"
    FLASH_NAND_TOOLS_CFG = "config_v2"
    FLASH_NOR_TOOLS_CFG = "config_v1"
    FLASH_HOSTDL_CFG = "config_v1"
    SRCROOT = "../../../../../.."

if env['MSM_ID'] in ['8974', '8x26', '8092']:
    PBL_VERSION_NUM = 1
elif env['CHIPSET'] in ['msm8916', 'msm8936', 'msm8909', 'msm8952','msm8956']:
    PBL_VERSION_NUM = 1
elif env['CHIPSET'] in ['mdm9x45']:
    PBL_VERSION_NUM = 2
else:
    PBL_VERSION_NUM = 3

if env['MSM_ID'] in ['9x45']:
   env.Replace(DAL_CONFIG_TARGET_ID = '0x9045')
else:
  env.Replace(DAL_CONFIG_TARGET_ID = '0x${MSM_ID}')
  
env.Append(CPPDEFINES = [
  "DAL_CONFIG_TARGET_ID=${DAL_CONFIG_TARGET_ID}",
])

#SDC1 -> 0, SDC2 -> 1, SDC3 -> 2, SDC4 -> 3
DEVICEPROGRAMMER_DRIVENO = ARGUMENTS.get('DEVICEPROGRAMMER_DRIVENO', "0")
DEVICEPROGRAMMER_SW_ID = ARGUMENTS.get('DEVICEPROGRAMMER_SW_ID', "26")
NUM_PARTITIONS = 8
ALLOW_WRITING_BEGINNING_AT_SECTOR_ADDR = []
ALLOW_WRITING_UP_TO_SECTOR_ADDR = []
for i in range(NUM_PARTITIONS):
    ALLOW_WRITING_BEGINNING_AT_SECTOR_ADDR.append(ARGUMENTS.get('ALLOW_WRITING_BEGINNING_AT_SECTOR_ADDR_%d' % i, None))
    ALLOW_WRITING_UP_TO_SECTOR_ADDR.append(ARGUMENTS.get('ALLOW_WRITING_UP_TO_SECTOR_ADDR_%d' % i, None))

env.Append(CPPDEFINES = [
   "BUILD_TOOL_CHAIN",
   "BUILD_HOSTDL",
   "BUILD_EHOSTDL",
   "BOOT_PBL_H=\\\"boot_pbl_v%d.h\\\"" % PBL_VERSION_NUM,
   "FEATURE_QDST_SECBOOT",
   "FEATURE_HS_USB_BASIC",
   "CODE_START_ADDR=" + CODE_START_ADDR,
   "RW_START_ADDR=" + RW_START_ADDR,
   "ZI_START_ADDR=" + ZI_START_ADDR,
   "DEVICEPROGRAMMER_STACK_BASE_ADDR=" + STACK_BASE_ADDR,
   "CHANNEL_BUFFER_A_START_ADDR=" + CHANNEL_BUFFER_A_START_ADDR,
   "CHANNEL_BUFFER_B_START_ADDR=" + CHANNEL_BUFFER_B_START_ADDR,
   "FIREHOSE_TX_BUFFER_SIZE=" + FIREHOSE_TX_BUFFER_SIZE,
   "TRANSMIT_BUFFER_START_ADDR=" + TRANSMIT_BUFFER_START_ADDR,
   "USB_ZI_START_ADDR=" + USB_ZI_START_ADDR,
   "FIREHOSE_CHANNEL_BUFFER_SIZE=" + FIREHOSE_CHANNEL_BUFFER_SIZE,
   "DEVICEPROGRAMMER_TARGET_NAME=" + '\\"%s\\"' % env['MSM_ID'],
   "DEVICEPROGRAMMER_SW_ID=" + DEVICEPROGRAMMER_SW_ID,
   "DEVICEPROGRAMMER_VIP_MODE=" + ARGUMENTS.get('DEVICEPROGRAMMER_VIP_MODE', '0'),
   "DEVICEPROGRAMMER_USE_DRIVENO=" + DEVICEPROGRAMMER_DRIVENO,
   "FEATURE_FIREHOSE_ENABLE_READ",
   "MAX_PAGE_SIZE=" + NAND_PAGE_SIZE,
   "FLASH_SINGLE_THREADED",
   "ENDIAN_LITTLE",
   "BUILD_NANDPRG",
   "DAL_IMAGE_FLASH_TOOLS",
   "FLASH_TOOLS_HEAP_SIZE=20000",

])

for i in range(NUM_PARTITIONS):
    if ALLOW_WRITING_BEGINNING_AT_SECTOR_ADDR[i] is not None:
        env.Append(CPPDEFINES = [
            "ALLOW_WRITING_BEGINNING_AT_SECTOR_ADDR_" + str(i) + "=" + ALLOW_WRITING_BEGINNING_AT_SECTOR_ADDR[i],
        ])
    if ALLOW_WRITING_UP_TO_SECTOR_ADDR[i] is not None:
        env.Append(CPPDEFINES = [
            "ALLOW_WRITING_UP_TO_SECTOR_ADDR_" + str(i) + "=" + ALLOW_WRITING_UP_TO_SECTOR_ADDR[i],
        ])
    #print "******************Adding " + "ALLOW_WRITING_BEGINNING_AT_SECTOR_ADDR_" + str(i) + "=" + ALLOW_WRITING_BEGINNING_AT_SECTOR_ADDR[i]
    #print "******************Adding " + "ALLOW_WRITING_UP_TO_SECTOR_ADDR_" + str(i) + "=" + ALLOW_WRITING_UP_TO_SECTOR_ADDR[i]

if 'validated' == variant_name:
    env.Append(CPPDEFINES = [
        "FEATURE_FIREHOSE_VALIDATION_ENABLED",
    ])

#------------------------------------------------------------------------------
# Decide which build steps to perform
#------------------------------------------------------------------------------
# Regular build steps (no filter) is build everything, once a user starts
# using filters we have to make decisions depending on user input.
#
# The LoadAUSoftwareUnits function will take care of filtering subsystem, units, 
# etc.  This is to take care of what steps to enable disable from the top level
# script, such as building files specify in this script i.e. quartz, stubs, etc.

do_local_files = True
do_link = True
do_post_link = True

# Get user input from command line
filter_opt = env.get('FILTER_OPT')

# Limit build processing based on filter option
if filter_opt is not None:
   do_link = False
   do_post_link = False

   if not env.FilterMatch(os.getcwd()):
      do_local_files = False
      
#-------------------------------------------------------------------------------
# Libraries Section
#-------------------------------------------------------------------------------
core_libs, core_objs = env.LoadAUSoftwareUnits('core')
deviceprogrammer_units = [core_objs, core_libs]

if do_local_files:
   #============================================================================
   # DEVICEPROGRAMMER Environment
   #============================================================================

   #----------------------------------------------------------------------------
   # Begin building DEVICEPROGRAMMER
   #----------------------------------------------------------------------------
   env.Replace(TARGET_NAME = image_name)
   env.Replace(MBN_FILE = image_name)

   #----------------------------------------------------------------------------
   # Generate Scatter Load File (SCL)
   #----------------------------------------------------------------------------
if env['MSM_ID'] in ['9x45']:
   deviceprogrammer_scl = env.SclBuilder('${SHORT_BUILDPATH}/${TARGET_NAME}',
      '${BUILD_ROOT}/core/storage/tools/deviceprogrammer/src/firehose/nand/deviceprogrammer_scatter_load_9645.scl')
else:
   deviceprogrammer_scl = env.SclBuilder('${SHORT_BUILDPATH}/${TARGET_NAME}',
      '${BUILD_ROOT}/core/storage/tools/deviceprogrammer/src/firehose/nand/deviceprogrammer_scatter_load_9645.scl')

   deviceprogrammer_units.extend(deviceprogrammer_scl)

if do_link:
   #----------------------------------------------------------------------------
   # Generate DEVICEPROGRAMMER ELF
   #----------------------------------------------------------------------------
   libs_path = env['INSTALL_LIBPATH']

   deviceprogrammer_elf = env.Program('${SHORT_BUILDPATH}/${TARGET_NAME}',
           source=[core_objs],
           LIBS=[core_libs], LIBPATH=libs_path)

   env.Depends(deviceprogrammer_elf, deviceprogrammer_scl)
   
   env.Clean(deviceprogrammer_elf, env.subst('${SHORT_BUILDPATH}/${TARGET_NAME}.map'))
   env.Clean(deviceprogrammer_elf, env.subst('${SHORT_BUILDPATH}/${TARGET_NAME}.sym'))

if do_post_link:
    #----------------------------------------------------------------------------
    # Generate DEVICEPROGRAMMER MBN
    #----------------------------------------------------------------------------
    install_unsigned_root = env.SectoolGetUnsignedInstallPath(install_base_dir =env.subst('${MBN_ROOT}'))
    env.Replace(MBN_FILE = os.path.join(install_unsigned_root, "${TARGET_NAME}"))
    deviceprogrammer_mbn = env.MbnBuilder('${SHORT_BUILDPATH}/${TARGET_NAME}',
                                         deviceprogrammer_elf,
                                         IMAGE_TYPE='ehostdl',
                                         MBN_TYPE="elf",
                                         IMAGE_ID=13,
                                         FLASH_TYPE="nand",
					 install_unsigned_root= '${MBN_ROOT}')

    """
    #----------------------------------------------------------------------------
    # Gensecimage signing
    #----------------------------------------------------------------------------             
    # gensecimage is turned on when USES_GENSECIMAGE is defined and .
    # the legacy USES_SECBOOT and USES_ENCRYPT_MBN are not defined
    # Use gensecimage_jtagid = ['0x12345678'] if the gensecimage_msmid is not supported
    gensecimage_mapping = {
        '8974': ['8974'],
        '8x26': ['8626', '8926'],
        '8x10': ['8610', '8612', '8210'],
        '8084': ['8084'],
        '8092': ['8092'],
        '8x62': ['8962'],
    }
    gensecimage_msmid = gensecimage_mapping[env['MSM_ID']]
    signed_mbn = env.GensecimageMbnBuilder(
        target_base_dir = variant_name + '/' + storage_medium + '/signed/',
        source=deviceprogrammer_mbn,
        gensecimage_section = "emmcbld",
        gensecimage_msmid = gensecimage_msmid,
    )

    # Installation
    if signed_mbn is not None:
        install_signed_mbn = env.InstallAs('${MBN_ROOT}/${TARGET_NAME}.mbn', signed_mbn[0][0])
    else:
        install_signed_mbn = env.InstallAs('${MBN_ROOT}/${TARGET_NAME}.mbn', deviceprogrammer_mbn)

    """
    #----------------------------------------------------------------------------
    # Sectools signing
    #----------------------------------------------------------------------------
    sectools_signed_mbn = env.SectoolBuilder(
      target_base_dir = '${SHORT_BUILDPATH}',
      source=deviceprogrammer_mbn,
      sign_id="emmcbld",
      msmid = env['MSM_ID'],
      sectools_install_base_dir = '${MBN_ROOT}', 
      install_file_name = "${TARGET_NAME}.mbn")

    #============================================================================
    # Define units that will be built
    #============================================================================
    deviceprogrammer_units = env.Alias ('krait_deviceprogrammer_units', [
          deviceprogrammer_elf,
          deviceprogrammer_mbn,
          sectools_signed_mbn,
    ])
    #deviceprogrammer_units += install_signed_mbn

# Add aliases
for alias in aliases:
    env.Alias(alias, deviceprogrammer_units)

